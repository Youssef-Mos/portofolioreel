// scripts/seed-projects.ts
import { PrismaClient } from '../src/generated/prisma';

const prisma = new PrismaClient();

// Donn√©es des projets √† ins√©rer
const projectsData = [
  {
    id: 1,
    title: "Classification Musicale Spotify",
    description: "Syst√®me de classification automatique de genres musicaux utilisant l'API Spotify et des algorithmes de Machine Learning.",
    longDescription: "Projet SDATA 2025 utilisant un dataset de 25492 chansons pour pr√©dire automatiquement le genre musical parmi 23 cat√©gories. Impl√©mentation de plusieurs algorithmes de classification supervis√©e avec analyse comparative des performances.",
    category: 'data-science',
    technologies: ['Python', 'Scikit-learn', 'Pandas', 'Spotify API', 'Machine Learning', 'Data Analysis'],
    teamSize: 3,
    duration: '3 mois',
    year: '2025',
    featured: true,
    status: 'completed',
    demoUrl: '/projects/spotify-demo',
    documentUrl: '/docs/spotify-project.pdf',
    githubUrl: 'https://github.com/youssef-mos/spotify-classification',
    image: '/projects/spotify-classification.jpg',
    highlights: [
      'Classification sur 23 genres musicaux diff√©rents',
      'Dataset de 25,492 chansons avec features audio',
      'Analyse comparative de multiple algorithmes ML',
      'Optimisation des hyperparam√®tres',
      '√âvaluation par F1-score micro average'
    ],
    challenges: [
      'Gestion des classes d√©s√©quilibr√©es',
      'Feature engineering sur donn√©es audio',
      'Optimisation des performances de classification'
    ]
  },
  {
    id: 2,
    title: "HumanML3D - Animation Humaine",
    description: "Projet de Machine Learning pour la g√©n√©ration d'animations 3D humaines r√©alistes √† partir de descriptions textuelles.",
    longDescription: "Impl√©mentation d'un mod√®le de deep learning pour g√©n√©rer des mouvements humains 3D √† partir de descriptions en langage naturel. Utilisation du dataset HumanML3D et techniques avanc√©es de g√©n√©ration de s√©quences.",
    category: 'ai',
    technologies: ['Python', 'PyTorch', 'Computer Vision', 'NLP', 'Animation 3D', 'Deep Learning'],
    teamSize: 2,
    duration: '2 mois',
    year: '2024',
    featured: true,
    status: 'completed',
    demoUrl: '/projects/humanml3d-demo',
    githubUrl: 'https://github.com/youssef-mos/humanml3d',
    image: '/projects/humanml3d.jpg',
    highlights: [
      'G√©n√©ration d\'animations 3D depuis du texte',
      'Mod√®le de deep learning avanc√©',
      'Dataset HumanML3D avec 14k+ animations',
      'Interface de d√©monstration interactive',
      '√âvaluation sur m√©triques FID et R-precision'
    ],
    challenges: [
      'Complexit√© des mouvements humains',
      'Alignement texte-mouvement',
      'Optimisation des performances GPU'
    ]
  },
  {
    id: 3,
    title: "Simulation Monte-Carlo - Criticit√© Uranium",
    description: "Simulation de criticit√© nucl√©aire utilisant les m√©thodes Monte-Carlo pour analyser le comportement de l'uranium.",
    longDescription: "Projet de physique nucl√©aire appliqu√©e utilisant les m√©thodes de Monte-Carlo pour simuler et analyser la criticit√© de syst√®mes contenant de l'uranium. Mod√©lisation math√©matique complexe avec visualisations interactives.",
    category: 'data-science',
    technologies: ['Python', 'NumPy', 'Matplotlib', 'Monte-Carlo', 'Physique Nucl√©aire', 'Simulation'],
    teamSize: 4,
    duration: '4 mois',
    year: '2024',
    featured: true,
    status: 'completed',
    demoUrl: '/projects/monte-carlo-demo',
    githubUrl: 'https://github.com/youssef-mos/monte-carlo-uranium',
    image: '/projects/monte-carlo.jpg',
    highlights: [
      'Simulation de r√©actions nucl√©aires',
      'Algorithmes Monte-Carlo optimis√©s',
      'Visualisation 3D des r√©sultats',
      'Analyse statistique avanc√©e',
      'Interface utilisateur interactive'
    ],
    challenges: [
      'Complexit√© des calculs physiques',
      'Optimisation des performances de simulation',
      'Validation des mod√®les math√©matiques'
    ]
  },
  {
    id: 4,
    title: "Jeu Mahjong Interactif",
    description: "Impl√©mentation compl√®te du jeu traditionnel Mahjong avec interface moderne et mode multijoueur.",
    longDescription: "D√©veloppement d'un jeu Mahjong complet avec r√®gles traditionnelles, interface utilisateur moderne, syst√®me de score, et possibilit√© de jeu en ligne. Architecture modulaire avec AI pour joueurs virtuels.",
    category: 'game',
    technologies: ['JavaScript', 'HTML5 Canvas', 'CSS3', 'WebSocket', 'Node.js', 'Game Logic'],
    teamSize: 3,
    duration: '2 mois',
    year: '2024',
    featured: false,
    status: 'completed',
    demoUrl: '/projects/mahjong-game',
    githubUrl: 'https://github.com/youssef-mos/mahjong-game',
    image: '/projects/mahjong.jpg',
    highlights: [
      'Logique de jeu Mahjong compl√®te',
      'Interface utilisateur intuitive',
      'Mode multijoueur en temps r√©el',
      'IA pour joueurs virtuels',
      'Syst√®me de scoring traditionnel'
    ],
    challenges: [
      'Impl√©mentation des r√®gles complexes',
      'Synchronisation multijoueur',
      'Optimisation des performances graphiques'
    ]
  },
  {
    id: 5,
    title: "Site Web Omegup",
    description: "Refonte compl√®te du site web d'entreprise avec focus sur l'exp√©rience utilisateur et les performances.",
    longDescription: "Projet de stage chez Omegup : refonte compl√®te du site web de l'entreprise avec am√©lioration du design, optimisation des performances, et d√©veloppement de nouvelles fonctionnalit√©s. Approche moderne avec Next.js et focus UX/UI.",
    category: 'web',
    technologies: ['Next.js', 'React', 'TypeScript', 'Tailwind CSS', 'UX/UI Design', 'SEO'],
    teamSize: 3,
    duration: '4 mois',
    year: '2024',
    featured: true,
    status: 'completed',
    demoUrl: 'https://omegup.tn',
    githubUrl: 'https://github.com/youssef-mos/omegup-website',
    image: '/projects/omegup.jpg',
    highlights: [
      'Refonte compl√®te du design',
      'Am√©lioration des performances (90+ Lighthouse)',
      'Interface responsive moderne',
      'Optimisation SEO avanc√©e',
      'Architecture Next.js scalable'
    ],
    challenges: [
      'Migration depuis l\'ancien syst√®me',
      'Optimisation des performances',
      'Int√©gration avec les syst√®mes existants'
    ]
  }
];

// Fonction utilitaire pour cr√©er un slug
function createSlug(title: string): string {
  return title
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Supprimer les accents
    .replace(/[^a-z0-9\s-]/g, '') // Supprimer les caract√®res sp√©ciaux
    .replace(/\s+/g, '-') // Remplacer les espaces par des tirets
    .replace(/-+/g, '-') // Supprimer les tirets multiples
    .trim();
}

// Fonction pour parser la dur√©e en mois
function parseDurationToMonths(duration: string): number {
  const match = duration.match(/(\d+)\s*(mois|an|ann√©e)/i);
  if (!match) return 1;
  
  const value = parseInt(match[1]);
  const unit = match[2].toLowerCase();
  
  if (unit.startsWith('an')) {
    return value * 12;
  }
  return value;
}

// Fonction pour cr√©er des dates approximatives
function createProjectDates(year: string, durationMonths: number) {
  const yearNum = parseInt(year);
  const startDate = new Date(yearNum, 0, 1); // 1er janvier de l'ann√©e
  const endDate = new Date(startDate);
  endDate.setMonth(endDate.getMonth() + durationMonths);
  
  return { startDate, endDate };
}

// Mapping des cat√©gories vers les cat√©gories de technologies
const categoryMapping: Record<string, string> = {
  'web': 'Web Development',
  'data-science': 'Data Science',
  'ai': 'Artificial Intelligence', 
  'game': 'Game Development'
};

async function seedProjects() {
  try {
    console.log('üå± D√©but du seed des projets...');

    // 1. Collecter toutes les technologies uniques
    const allTechnologies = new Set<string>();
    projectsData.forEach(project => {
      project.technologies.forEach(tech => allTechnologies.add(tech));
    });

    console.log(`üì¶ Cr√©ation de ${allTechnologies.size} technologies...`);

    // 2. Cr√©er ou r√©cup√©rer toutes les technologies
    const techMap = new Map<string, any>();
    
    for (const techName of allTechnologies) {
      // D√©terminer la cat√©gorie de la technologie
      let category = 'Other';
      if (['React', 'Next.js', 'Vue', 'Angular', 'JavaScript', 'TypeScript', 'HTML5 Canvas', 'CSS3', 'Tailwind CSS'].includes(techName)) {
        category = 'Web Development';
      } else if (['Python', 'NumPy', 'Matplotlib', 'Pandas', 'Scikit-learn'].includes(techName)) {
        category = 'Data Science';
      } else if (['Machine Learning', 'Deep Learning', 'PyTorch', 'Computer Vision', 'NLP'].includes(techName)) {
        category = 'Artificial Intelligence';
      } else if (['Node.js', 'WebSocket'].includes(techName)) {
        category = 'Backend';
      } else if (['Game Logic'].includes(techName)) {
        category = 'Game Development';
      }

      const technology = await prisma.technology.upsert({
        where: { slug: createSlug(techName) },
        update: {},
        create: {
          name: techName,
          slug: createSlug(techName),
          category: category,
          iconUrl: null // Vous pouvez ajouter des URLs d'ic√¥nes plus tard
        }
      });
      
      techMap.set(techName, technology);
      console.log(`‚úÖ Technologie cr√©√©e/trouv√©e: ${techName} (${category})`);
    }

    console.log('üöÄ Cr√©ation des projets...');

    // 3. Cr√©er les projets
    for (const projectData of projectsData) {
      const slug = createSlug(projectData.title);
      const durationMonths = parseDurationToMonths(projectData.duration);
      const { startDate, endDate } = createProjectDates(projectData.year, durationMonths);
      
      // Pr√©parer les technologies pour la relation
      const projectTechnologies = projectData.technologies.map(techName => ({
        id: techMap.get(techName)!.id
      }));

      // Combiner highlights et challenges pour keyPoints
      const keyPoints = [
        ...projectData.highlights,
        ...projectData.challenges.map(c => `D√©fi: ${c}`)
      ];

      // Cr√©er des mots-cl√©s √† partir de la description et des technologies
      const keywords = [
        ...projectData.technologies.map(t => t.toLowerCase()),
        projectData.category,
        projectData.year,
        'projet',
        'd√©veloppement'
      ];

      const project = await prisma.project.upsert({
        where: { slug },
        update: {
          title: projectData.title,
          description: projectData.description,
          keyPoints: keyPoints,
          keywords: keywords,
          teamSize: projectData.teamSize,
          durationMonths: durationMonths,
          startDate: startDate,
          endDate: endDate,
          favorite: projectData.featured,
          logoUrl: projectData.image,
          technologies: {
            set: projectTechnologies
          }
        },
        create: {
          title: projectData.title,
          slug: slug,
          description: projectData.description,
          keyPoints: keyPoints,
          keywords: keywords,
          teamSize: projectData.teamSize,
          durationMonths: durationMonths,
          startDate: startDate,
          endDate: endDate,
          favorite: projectData.featured,
          logoUrl: projectData.image,
          technologies: {
            connect: projectTechnologies
          }
        },
        include: {
          technologies: true
        }
      });

      console.log(`‚úÖ Projet cr√©√©/mis √† jour: ${project.title}`);
      console.log(`   - Slug: ${project.slug}`);
      console.log(`   - Technologies: ${project.technologies.map(t => t.name).join(', ')}`);
      console.log(`   - Dur√©e: ${project.durationMonths} mois`);
      console.log(`   - Favori: ${project.favorite ? 'Oui' : 'Non'}`);
      console.log('');
    }

    console.log('üéâ Seed des projets termin√© avec succ√®s !');
    
    // Afficher un r√©sum√©
    const totalProjects = await prisma.project.count();
    const totalTechnologies = await prisma.technology.count();
    const favoriteProjects = await prisma.project.count({ where: { favorite: true } });
    
    console.log('\nüìä R√©sum√©:');
    console.log(`   - Projets total: ${totalProjects}`);
    console.log(`   - Technologies total: ${totalTechnologies}`);
    console.log(`   - Projets favoris: ${favoriteProjects}`);

  } catch (error) {
    console.error('‚ùå Erreur lors du seed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
if (require.main === module) {
  seedProjects()
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export default seedProjects;